[
  {
    "objectID": "mapping_census_r_web.html",
    "href": "mapping_census_r_web.html",
    "title": "Mapping Census Data in R",
    "section": "",
    "text": "We are going to start by installing the following packages\ninstall.packages(c(\"tidycensus\", \"tidyverse\", \"mapview\", \"ggspatial\", \"leafsync\", \"ggplot2\"))\ntidycensus: allows users to interface with a select number of the US Census Bureau’s data APIs and return tidyverse-ready data frames, optionally with simple feature geometry included.\ntidyverse: is a collection of open-source R packages that help with data science tasks like importing, tidying, manipulating, and visualizing data\nmapview: is a tool for quickly creating interactive maps of spatial data.\nggspatial: is a framework for interacting with spatial data using ggplot2 to create maps.\nleafsync: is a plugin for leaflet to produce potentially synchronised small multiples of leaflet web maps wrapping Leaflet."
  },
  {
    "objectID": "mapping_census_r_web.html#installing-the-packages",
    "href": "mapping_census_r_web.html#installing-the-packages",
    "title": "Mapping Census Data in R",
    "section": "",
    "text": "We are going to start by installing the following packages\ninstall.packages(c(\"tidycensus\", \"tidyverse\", \"mapview\", \"ggspatial\", \"leafsync\", \"ggplot2\"))\ntidycensus: allows users to interface with a select number of the US Census Bureau’s data APIs and return tidyverse-ready data frames, optionally with simple feature geometry included.\ntidyverse: is a collection of open-source R packages that help with data science tasks like importing, tidying, manipulating, and visualizing data\nmapview: is a tool for quickly creating interactive maps of spatial data.\nggspatial: is a framework for interacting with spatial data using ggplot2 to create maps.\nleafsync: is a plugin for leaflet to produce potentially synchronised small multiples of leaflet web maps wrapping Leaflet."
  },
  {
    "objectID": "mapping_census_r_web.html#the-tidycensus-package",
    "href": "mapping_census_r_web.html#the-tidycensus-package",
    "title": "Mapping Census Data in R",
    "section": "2 The tidycensus package",
    "text": "2 The tidycensus package\nIn this tutorial we will be using tidycensus package, developed by Kyle Walker.\n\ntidycensus is an R package that allows users to interface with a select number of the US Census Bureau’s data APIs and return tidyverse-ready data frames, optionally with simple feature geometry included.\n\n2.1 Essential functions\nget_decennial(), which requests data from the US Decennial Census APIs for 2000, 2010, and 2020.\nget_acs(), which requests data from the 1-year and 5-year American Community Survey samples. Data are available from the 1-year ACS back to 2005 and the 5-year ACS back to 2005-2009.\nget_estimates(), an interface to the Population Estimates APIs. These datasets include yearly estimates of population characteristics by state, county, and metropolitan area, along with components of change demographic estimates like births, deaths, and migration rates.\nget_pums(), which accesses data from the ACS Public Use Microdata Sample APIs. These samples include anonymized individual-level records from the ACS organized by household and are highly useful for many different social science analyses. get_pums() is covered in more depth in Chapters 9 and 10.\nget_flows(), an interface to the ACS Migration Flows APIs. Includes information on in- and out-flows from various geographies for the 5-year ACS samples, enabling origin-destination analyses."
  },
  {
    "objectID": "mapping_census_r_web.html#get-acs-data",
    "href": "mapping_census_r_web.html#get-acs-data",
    "title": "Mapping Census Data in R",
    "section": "3 Get ACS data",
    "text": "3 Get ACS data\n\n3.1 About the ACS\nThe American Community Survey ACS is a nationwide survey that collects and publishes information about the US population’s social, economic, housing, and demographic characteristics.\nThe ACS provides data on topics such as: income, jobs and occupations, educational attainment, veterans, and housing tenure.\nThe ACS produces two types of estimates:\n\n1-year estimates: Available for geographic areas with populations of 65,000 or more. These estimates are more current.\n5-year estimates: Available for all geographic areas, including census tracts and block groups. These estimates are more statistically reliable, especially for smaller population groups\n\n\n\n3.2 Getting a specific variable for all counties in one state.\nWe are going to start exploring census data at the county level. We are going to ask for a table with the total population for each county in the State of Pennsylvania.\n\nLoad the package with the following command\n\n\nlibrary(tidycensus)\n\n\nCreate a new object named latino_pop_PA with the following code\n\nBe aware that the property geography = is being specified with the string \"county\" to get data at this level. We are setting the property state = to retrieve all counties in Pennsylvania by defining the value \"PA\". The line variables = comtains the identificator for the total of population in the original census table. We will see how to identify the variables ID in the following steps.\n\nlatino_pop_PA &lt;- get_acs(\n  geography = \"county\",\n  state = \"PA\",\n  variables = \"B03001_003\",\n  year = 2022\n)\n\nGetting data from the 2018-2022 5-year ACS\n\n\nWarning: • You have not set a Census API key. Users without a key are limited to 500\nqueries per day and may experience performance limitations.\nℹ For best results, get a Census API key at\nhttp://api.census.gov/data/key_signup.html and then supply the key to the\n`census_api_key()` function to use it throughout your tidycensus session.\nThis warning is displayed once per session.\n\nlatino_pop_PA\n\n# A tibble: 67 × 5\n   GEOID NAME                           variable   estimate   moe\n   &lt;chr&gt; &lt;chr&gt;                          &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;\n 1 42001 Adams County, Pennsylvania     B03001_003     7688    NA\n 2 42003 Allegheny County, Pennsylvania B03001_003    29272    NA\n 3 42005 Armstrong County, Pennsylvania B03001_003      560    NA\n 4 42007 Beaver County, Pennsylvania    B03001_003     3227    NA\n 5 42009 Bedford County, Pennsylvania   B03001_003      598    NA\n 6 42011 Berks County, Pennsylvania     B03001_003    99460    NA\n 7 42013 Blair County, Pennsylvania     B03001_003     1721    NA\n 8 42015 Bradford County, Pennsylvania  B03001_003      946    NA\n 9 42017 Bucks County, Pennsylvania     B03001_003    38195    NA\n10 42019 Butler County, Pennsylvania    B03001_003     3391    NA\n# ℹ 57 more rows\n\n\nThe column estimate shows the number of latino population for each county in Pennsylvania, while the column moe shows the margin of error around it.\n\n\n3.3 Exploring the original census file variables\nAs mentioned, each variable has its unique identifier in the original file. You will need to know the identifier of the variables you want to get in order to process a file in your project. To explore the variables in the original files you can use the load_variables() function specifying the year and dataset.\nFor example you can use the following to get the ACS 2022 5-year-estimate variables.\n\nvars &lt;- load_variables(2022, \"acs5\")\n\nhead(vars)\n\n# A tibble: 6 × 4\n  name        label                                   concept          geography\n  &lt;chr&gt;       &lt;chr&gt;                                   &lt;chr&gt;            &lt;chr&gt;    \n1 B01001A_001 Estimate!!Total:                        Sex by Age (Whi… tract    \n2 B01001A_002 Estimate!!Total:!!Male:                 Sex by Age (Whi… tract    \n3 B01001A_003 Estimate!!Total:!!Male:!!Under 5 years  Sex by Age (Whi… tract    \n4 B01001A_004 Estimate!!Total:!!Male:!!5 to 9 years   Sex by Age (Whi… tract    \n5 B01001A_005 Estimate!!Total:!!Male:!!10 to 14 years Sex by Age (Whi… tract    \n6 B01001A_006 Estimate!!Total:!!Male:!!15 to 17 years Sex by Age (Whi… tract    \n\n\nThe resulting table will have a column name with the variable code (you will input this text in the get_acs() function), a label column with the description fo the variable, a concept with the group variable and a geography column specifying the smallest level at which the variable is available.\nFor our purpose, the ACS 2022 variables that contain the number of people of Hispanic or Latino Origin are from row 580 to 609. Here is an extract of these rows.\n\nvars[580:609,]\n\n# A tibble: 30 × 4\n   name       label                                            concept geography\n   &lt;chr&gt;      &lt;chr&gt;                                            &lt;chr&gt;   &lt;chr&gt;    \n 1 B03001_002 Estimate!!Total:!!Not Hispanic or Latino         Hispan… tract    \n 2 B03001_003 Estimate!!Total:!!Hispanic or Latino:            Hispan… tract    \n 3 B03001_004 Estimate!!Total:!!Hispanic or Latino:!!Mexican   Hispan… tract    \n 4 B03001_005 Estimate!!Total:!!Hispanic or Latino:!!Puerto R… Hispan… tract    \n 5 B03001_006 Estimate!!Total:!!Hispanic or Latino:!!Cuban     Hispan… tract    \n 6 B03001_007 Estimate!!Total:!!Hispanic or Latino:!!Dominica… Hispan… tract    \n 7 B03001_008 Estimate!!Total:!!Hispanic or Latino:!!Central … Hispan… tract    \n 8 B03001_009 Estimate!!Total:!!Hispanic or Latino:!!Central … Hispan… tract    \n 9 B03001_010 Estimate!!Total:!!Hispanic or Latino:!!Central … Hispan… tract    \n10 B03001_011 Estimate!!Total:!!Hispanic or Latino:!!Central … Hispan… tract    \n# ℹ 20 more rows\n\n\n\n\n3.4 Getting tables from the ACS\nAnother way to get variables from the ACS is to use the table = property in tidycensus. Instead of returning one single variable as we did in the previous step, this will return a table with all variables in the B03001 set that contains all latino population B03001_003, along with:\n\n\nB03001 Table\n\n\nCode\nVariable\n\n\n\n\nB03001_004\nMexican\n\n\nB03001_005\nPuerto Rican\n\n\nB03001_006\nCuban\n\n\nB03001_007\nDominican\n\n\nB03001_009\nCosta Rican\n\n\nB03001_010\nGuatemalan\n\n\nB03001_011\nHonduran\n\n\nB03001_012\nNicaraguan\n\n\nB03001_013\nPanamanian\n\n\nB03001_014\nSalvadoran\n\n\nB03001_015\nOther Central American\n\n\nB03001_017\nArgentinian\n\n\nB03001_018\nBolivian\n\n\nB03001_019\nChilean\n\n\nB03001_020\nColombian\n\n\nB03001_021\nEcuadorian\n\n\nB03001_022\nParaguayan\n\n\nB03001_023\nPeruvian\n\n\nB03001_024\nUruguayan\n\n\nB03001_025\nVenezuelan\n\n\nB03001_026\nOther South American\n\n\nB03001_027\nOther Hispanic or Latino\n\n\n\n\nlatino_table_PA &lt;- get_acs(\n  geography = \"county\",\n  state = \"PA\",\n  ##county = \"Philadelphia\",\n  table = \"B03001\",\n  year = 2022,\n  output = \"wide\"\n)\n\nGetting data from the 2018-2022 5-year ACS\n\n\nLoading ACS5 variables for 2022 from table B03001. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n\nlatino_table_PA\n\n# A tibble: 67 × 64\n   GEOID NAME        B03001_001E B03001_001M B03001_002E B03001_002M B03001_003E\n   &lt;chr&gt; &lt;chr&gt;             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 42001 Adams Coun…      104604          NA       96916          NA        7688\n 2 42003 Allegheny …     1245310          NA     1216038          NA       29272\n 3 42005 Armstrong …       65538          NA       64978          NA         560\n 4 42007 Beaver Cou…      167629          NA      164402          NA        3227\n 5 42009 Bedford Co…       47613          NA       47015          NA         598\n 6 42011 Berks Coun…      428483          NA      329023          NA       99460\n 7 42013 Blair Coun…      122640          NA      120919          NA        1721\n 8 42015 Bradford C…       60159          NA       59213          NA         946\n 9 42017 Bucks Coun…      645163          NA      606968          NA       38195\n10 42019 Butler Cou…      194562          NA      191171          NA        3391\n# ℹ 57 more rows\n# ℹ 57 more variables: B03001_003M &lt;dbl&gt;, B03001_004E &lt;dbl&gt;, B03001_004M &lt;dbl&gt;,\n#   B03001_005E &lt;dbl&gt;, B03001_005M &lt;dbl&gt;, B03001_006E &lt;dbl&gt;, B03001_006M &lt;dbl&gt;,\n#   B03001_007E &lt;dbl&gt;, B03001_007M &lt;dbl&gt;, B03001_008E &lt;dbl&gt;, B03001_008M &lt;dbl&gt;,\n#   B03001_009E &lt;dbl&gt;, B03001_009M &lt;dbl&gt;, B03001_010E &lt;dbl&gt;, B03001_010M &lt;dbl&gt;,\n#   B03001_011E &lt;dbl&gt;, B03001_011M &lt;dbl&gt;, B03001_012E &lt;dbl&gt;, B03001_012M &lt;dbl&gt;,\n#   B03001_013E &lt;dbl&gt;, B03001_013M &lt;dbl&gt;, B03001_014E &lt;dbl&gt;, …\n\n\nNote that this table contains both the estimate for the variable end the error. All variable names ending with E contain the estimate."
  },
  {
    "objectID": "mapping_census_r_web.html#exploring-the-percentage-of-latino-population-by-county",
    "href": "mapping_census_r_web.html#exploring-the-percentage-of-latino-population-by-county",
    "title": "Mapping Census Data in R",
    "section": "4 Exploring the percentage of latino population by county",
    "text": "4 Exploring the percentage of latino population by county\nTo explore the percentage of latino population we arw going to create a graph with bars showing this variable. First, we clean up the county names to contain the name of the county only.\n\nlatino_table_PA$NAME &lt;- gsub(\" County|, Pennsylvania\", \"\", latino_table_PA$NAME)\n\nSecond, we calculate the percentage of latino population by dividing the number of latinos by the total population on each county. We add this new variable latino_percentage to our table.\n\nlatino_table_PA$latino_percentage &lt;- (latino_table_PA$B03001_003E / latino_table_PA$B03001_001E) * 100\n\nLastly, we plot the percentage in bars using the ggplot() and geom_bar() options.\n\nlibrary(\"ggplot2\")\nggplot(latino_table_PA, aes(x = reorder(NAME, -latino_percentage), y = latino_percentage)) +\n  geom_bar(stat = \"identity\", fill = \"darkred\") +\n  labs(\n    x = \"County\",\n    y = \"Latino Population Percentage\",\n    title = \"Percentage of Latino Population by County in Pennsylvania\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n\n\n\nAs seen in the graph, Lehigh County has the highest percentage of latino population (more than 35%) followed by Berks and Monroe (more than 20%) and Philadelphia, Luzerne, Northhampton, Lebanon, Pike, Lancaster and Dauphin (more than 10%)."
  },
  {
    "objectID": "mapping_census_r_web.html#creating-a-map-with-the-acs-data",
    "href": "mapping_census_r_web.html#creating-a-map-with-the-acs-data",
    "title": "Mapping Census Data in R",
    "section": "5 Creating a map with the ACS data",
    "text": "5 Creating a map with the ACS data\nIn this section we are going to answer the question:\n\n\n\n\n\n\nGuiding question\n\n\n\nWhat is the spatial distribution of the percentage of latino population in the State of Pennsylvania?\n\n\nTo do so, we are going to explore additional properties on the get_acs() function and how to use it to generate different types of maps.\n\n5.1 Getting the geometry from the census\nTo build a map with the census and ACS data we will need the geometry (polygons) of the geography we are adding the data to. In this exmaple, the counties.\nThe geometry = TRUE option of the tidycensus package has the ability to download an additional column that stores a polygon geometry of the corresponding geographic level, in this case the counties.\nIf you rerun the code below, adding the geometry = TRUE option, the resulting table will have an additional column.\n\nlatino_table_PA &lt;- get_acs(\n  geography = \"county\",\n  state = \"PA\",\n  table = \"B03001\",\n  year = 2022,\n  output = \"wide\",\n  geometry = TRUE\n)\n\nWe can plot the polygons with the following line.\n\nplot(latino_table_PA$geometry)\n\n\n\n\n\n\n\n\n\n\n5.2 Creating a choroplet map from an ACS variable\nTo answer our guiding question we are going to plot the percentage of latino population in a map.\nFirst, we are going to calculate the percentage of latino population on the table that contains geometry.\n\nlatino_table_PA$latino_percentage &lt;- (latino_table_PA$B03001_003E / latino_table_PA$B03001_001E) * 100\n\nNow, we can simply use the same ggpllot code line we used before to get a map of this variable. We set the data property to point to our latino_table_PA table and the fill option to the variable that contains the percentage we created in the previous step. The geom_sf() function is used to read the geomtry field as polygons and render them in a map.\n\nggplot(data = latino_table_PA, aes(fill = latino_percentage)) + \n  geom_sf()\n\n\n\n\n\n\n\n\n\n\n5.3 Customizing the choroplet map\nFor a customized version of the map, we can use the scale_fill_distiller() function that allows choosing from different map color palettes and labs() function to specify the general title, footnote caption and key title of the map.\nIf you want to know more about the color ramps go to ColorBrewer.\n\nggplot(data = latino_table_PA, aes(fill = latino_percentage)) + \n  geom_sf() + \n  scale_fill_distiller(palette = \"YlOrRd\", \n                       direction = 1) + \n  labs(title = \"  Percentage of latino population by county in Pennsylvania, 2022\",\n       caption = \"Data source: 2022 5-year ACS, US Census Bureau\",\n       fill = \"Percenatge\") + \n  theme_void()\n\n\n\n\n\n\n\n\n\n\n5.4 Exercise 1: Exploring other geometries, census tracts.\nAlthough the counties map show certain spatial pattern, we know that not all the county is the same internally. If we explore this variable with more granularity, we might see different patterns.\nLets re-do the whole process but this time getting the data at the census tract level.\n\nStart by creating a table latino_table_tracts_PA and setting the geography = to “tract”. All the rest can remain the same.\n\n\n\n\n\n\n\nAttention\n\n\n\nThis process might take longer than the ones we run before due to a higher number of records.\n\n\n\nlatino_table_tracts_PA &lt;- get_acs(\n  geography = \"tract\",\n  state = \"PA\",\n  table = \"B03001\",\n  year = 2022,\n  output = \"wide\",\n  geometry = TRUE\n)\n\n\nNow, lets calculate the percentage of latino population on each tract.\n\n\nlatino_table_tracts_PA$latino_percentage &lt;- ifelse(latino_table_tracts_PA$B03001_003E&gt;0, 100* (latino_table_tracts_PA$B03001_003E / latino_table_tracts_PA$B03001_001E),0)\n\nIn this case we used an ifelse clause because some tracts have 0 latino population and we want to avoid having null values in our results.\n\nAnd lastly, lets create the map using the table and variable we just created.\n\n\nggplot(data = latino_table_tracts_PA, aes(fill = latino_percentage)) + \n  geom_sf() + \n  scale_fill_distiller(palette = \"YlOrRd\",\n                       direction = 1) + \n  labs(title = \"  Percentage of latino population by tract in Pennsylvania, 2022\",\n       caption = \"Data source: 2022 5-year ACS, US Census Bureau\",\n       fill = \"Percentage\") + \n  theme_void()\n\n\n\n\n\n\n\n\nWhere did the people go?\nIn this case, it is convenient to change the polygon outline thickness by adding linewidth = 0.01 to the geom_sf() function.\nWe can also add the county outlines to identify them by addind borders(\"county\",\"pennsylvania\").\n\n## install.packages(\"maps\")\nlibrary(\"maps\")\n\nggplot(data = latino_table_tracts_PA, aes(fill = latino_percentage)) + \n  geom_sf(linewidth=0.01) + \n  scale_fill_distiller(palette = \"YlOrRd\",\n                       direction = 1) + \n  labs(title = \"  Percentage of latino population by tract in Pennsylvania, 2022\",\n       caption = \"Data source: 2022 5-year ACS, US Census Bureau\",\n       fill = \"Percentage\") + \n  borders(\"county\",\"pennsylvania\") +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n5.5 Exercise 2: Focusing on a specific county: Lehigh County.\nWe are going to focus on the county with the highest percentage of Latino population, Lehigh County.\nFor that, lets start generating a specific table for that county.\nNotice that we set the table name to lehigh_latino, the geography = tract and added county = \"Lehigh\" to get all tracts in Lehigh County.\n\nlehigh_latino &lt;- get_acs(\n  geography = \"tract\",\n  state = \"PA\",\n  county = \"Lehigh\",\n  table = \"B03001\",\n  year = 2022,\n  output = \"wide\",\n  geometry = TRUE\n)\n\nNow lest calculate the percentage of latinos using the same code we used before. Be sure to use the correct table name lehigh_latino.\n\nlehigh_latino$latino_percentage &lt;- ifelse(lehigh_latino$B03001_003E&gt;0, 100* (lehigh_latino$B03001_003E / lehigh_latino$B03001_001E),0)\n\nAnd now, lets generate a choroplet map as the last we did.\n\nggplot(data = lehigh_latino, aes(fill = latino_percentage)) + \n  geom_sf(linewidth=0.01) + \n  scale_fill_distiller(palette = \"YlOrRd\",\n                       direction = 1) + \n  labs(title = \"  Percentage of latino population by tract in Lehigh County, 2022\",\n       caption = \"Data source: 2022 5-year ACS, US Census Bureau\",\n       fill = \"Percentage\") + \n  theme_void()\n\n\n\n\n\n\n\n\nAgain, in this map we can see that the highest percentage of latino population is located towards the center of the county while the outter tracts have very low values."
  },
  {
    "objectID": "mapping_census_r_web.html#customized-interactive-maps-with-mapgl",
    "href": "mapping_census_r_web.html#customized-interactive-maps-with-mapgl",
    "title": "Mapping Census Data in R",
    "section": "6 Customized interactive maps with mapgl()",
    "text": "6 Customized interactive maps with mapgl()\nThere are multiple ways you can customize your maps in R. We are going to explore the mapgl() package to create interactive maps.\n\n6.1 The mapgl() package\n\nThe mapgl R package allows users to create interactive maps in R using the Mapbox GL JS and MapLibre GL JS libraries:\nFeatures Create globe visualizations, layer objects to make filled maps, circle maps, heatmaps, and 3D graphics, and customize map styles and views.\nEase of use Designed to be intuitive for R users while still offering the capabilities of the Mapbox GL JS and MapLibre GL JS libraries\nFlexibility Allows for more code to be written when making maps, but also gives users more flexibility in how they design their maps\nShiny web applications Includes utilities to use Mapbox and MapLibre maps in Shiny web applications\nFind more information on the mapgl package.\n\n\n6.2 Getting started with mapgl\nThe mapgl package lets you create maps using Mapbox and Maplibre. These two are javascript libraries that render interactive maps in the web. For this demo, we are using Maplibre since it is open-source and free to use.\n\nLets start by installing the mapgl package and calling the library with the code below.\n\ninstall.packages(\"mapgl\")\n\n\nlibrary(mapgl)\n\nTo initialize a map we will need the following line of code.\n\nmaplibre()\n\n\n\n\n\nIt will display a map of the world with the default basemap from CARTO’s Voyager tiles.\nYou can set some things in the map by using style =, center =, zoom =, bearing =, pitch =, and others. We are going to initialize a map centered at Temple University Charles Library in Philadelphia, PA. To do so, I added center = c(-75.15541, 39.98215) the geographic coordinates of the building and zoom = 16 a zoom that is closer to this part of the city.\n\nmaplibre( \n  center = c(-75.15541, 39.98215), \n  zoom = 16, \n)\n\n\n\n\n\n\n\n6.3 Adding census data to maplibre\nNow, we are going to initialize a map centered in the State of Pennsylvania using the table we created before latino_table_PA. We are going to store this map in the variable pa_map.\n\npa_map &lt;- maplibre(bounds = latino_table_PA) \n\npa_map\n\n\n\n\n\nIn the following code, we are going to add a layer and a legend to our map. With the add_fill_layer() we are able to call the column = \"latino_percentage from our source = latino_table_PA. We are setting a continuous color ramp using values between 1 and 40 to accomodate the colors between light yellow and dark orange.To improve the visualization of the reference data in the background we set fill_oppacity = 0.7.\nTo add a legend we simply used the same settings for values and colors that we used previously and added a title.\n\npa_map |&gt; \n  add_fill_layer(\n  id = \"pa_latino\",\n  source = latino_table_PA,\n  fill_color = interpolate(\n    column = \"latino_percentage\",\n    values = c(1, 40),\n    stops = c(\"lightyellow\", \"darkorange\"),\n    na_color = \"lightgrey\"\n  ),\n  fill_opacity = 0.7\n ) |&gt; \n  add_legend(\n    \"Percentage of Latino Population, 2022\",\n    values = c(1, 40),\n    colors = c(\"lightyellow\", \"darkorange\")\n  )\n\n\n\n\n\n\n\n6.4 Adding interactivity to your map\nThere are several ways you can make you map interactive. From adding navigation controls using add_navigation_control() to adding a popup and tooltip. In the following code, we also use a categorical styling instead of a continous color ramp.\n\nlatino_table_PA$popup &lt;- glue::glue(\n  \"&lt;strong&gt;County: &lt;/strong&gt;{latino_table_PA$NAME}&lt;br&gt;&lt;strong&gt;Percentage: &lt;/strong&gt;{sprintf('%.2f', latino_table_PA$latino_percentage)}%\"\n)\n\n\nbrewer_pal &lt;- RColorBrewer::brewer.pal(6, \"YlGnBu\")\n\npa_map |&gt; \n  add_fill_layer(\n    id = \"pa_latino\",\n    source = latino_table_PA,\n    fill_color = step_expr(\n      column = \"latino_percentage\",\n      base = brewer_pal[1],\n      stops = brewer_pal[1:6],\n      values = seq(0.8, 27.2, length.out = 6),\n      na_color = \"white\"\n    ),\n    fill_opacity = 0.5,\n    popup = \"popup\",\n    tooltip = \"latino_percentage\",\n    hover_options = list(\n      fill_color = \"yellow\",\n      fill_opacity = 1\n    )\n  ) |&gt; \n  add_legend(\n    \"Latino Population, 2022\",\n    values = c(\n      \"Less than 5%\",\n      \"5%-10%\",\n      \"10%-15%\",\n      \"15%-20%\",\n      \"20%-25%\",\n      \"More than 25%\"\n    ),\n    colors = brewer_pal,\n    type = \"categorical\"\n  ) |&gt;\n  add_navigation_control()\n\n\n\n\n\n\n\n6.5 Exercise 3: Redo the interactive map for Philadelphia County\nNow we are going to redo the interactive map for a specific county. We can use the same code we used in step 5.5 to create a new table for Philadelphia. We also calculated the percentage of latino population.\n\nphilly_latino &lt;- get_acs(\n  geography = \"tract\",\n  state = \"PA\",\n  county = \"Philadelphia\",\n  table = \"B03001\",\n  year = 2022,\n  output = \"wide\",\n  geometry = TRUE\n)\n\nphilly_latino$latino_percentage &lt;- ifelse(\n  philly_latino$B03001_003E &gt; 0,\n  round(100 * (philly_latino$B03001_003E / philly_latino$B03001_001E), 2),\n  0\n)\n\nWe initialize the map with the following code.\n\nphilly_map &lt;- maplibre(bounds = philly_latino) \n\nNow, lets build the interactive map.\n\nphilly_latino$popup &lt;- glue::glue(\n  \"&lt;strong&gt;Name: &lt;/strong&gt;{philly_latino$GEOID}&lt;br&gt;&lt;strong&gt;Percentage: &lt;/strong&gt;{philly_latino$latino_percentage}%\"\n)\n\n\nbrewer_pal &lt;- RColorBrewer::brewer.pal(9, \"YlGnBu\")\n\nphilly_map |&gt; \n  add_fill_layer(\n    id = \"philly_latino\",\n    source = philly_latino,\n    fill_color = step_expr(\n      column = \"latino_percentage\",\n      base = brewer_pal[1],\n      stops = brewer_pal[1:9],\n      values = seq(1, 92.03, length.out = 9),\n      na_color = \"white\"\n    ),\n    fill_opacity = 0.5,\n    popup = \"popup\",\n    tooltip = \"latino_percentage\",\n    hover_options = list(\n      fill_color = \"yellow\",\n      fill_opacity = 1\n    )\n  ) |&gt; \n  add_legend(\n    \"Latino Population, Philadelphia 2022\",\n    values = c(\n      \"Less than 12%\",\n      \"12% - 22%\",\n      \"22% - 32%\",\n      \"32% - 42%\",\n      \"42% - 53%\",\n      \"53% - 63%\",\n      \"63% - 73%\",\n      \"73% - 84%\",\n      \"More than 84%\"\n    ),\n    colors = brewer_pal,\n    type = \"categorical\"\n  ) |&gt;\n  add_navigation_control()"
  },
  {
    "objectID": "mapping_census_r_web.html#workshop-slides",
    "href": "mapping_census_r_web.html#workshop-slides",
    "title": "Mapping Census Data in R",
    "section": "7 Workshop slides",
    "text": "7 Workshop slides"
  }
]